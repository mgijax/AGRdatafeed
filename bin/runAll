#!/bin/bash

function usage {
  logit "
Usage: $0 -R schema_release -C dump_count [-D output_directory][-g][-a][-e][-p][-d][-f]
Generates files for upload to the Alliance. Typical invocation:
	$0 -R 1.0.0.7 -C 3 -D .
This will do the same thing but only dump the phenotype and allele info files:
	$0 -R 1.0.0.7 -C 3 -D . -p -a
Options:
-h	Print this message and exit.
-R	Specifies the alliance schema release number, eg, 1.0.0.7. Required.
-C	Specifies the update count for this schema version (1, 2, 3, ...). Required.
-D	Specifies the parent directory where the output directory will be created.
	Default = current working directory.
-V	Directory where agr validator is installed. Optional. If not specified, no validation is done.

Specify any combination of the following options to run just those pieces.
If none are specified, ALL are run.
-g	Dump the basic gene info file.
-a	Dump the allele info file.
-e	Dump the wildtype expression data file.
-p	Dump the phenotype annotations file.
-d	Dump the disease annotations file.
-f	Dump the GFF3 gene models file.
"
}

# ---------------------
# Echos its arguments to the log file. Prepends a datetime stamp.
#
function logit {
  echo `date` "$*" 
}

# ---------------------
# Logs a message and exits with error code 1.
#
function die {
    logit "$*"
    exit 1
}

# ---------------------
# If the exit code of the last command ($?) is not zero, exits with a message.
#
function checkExit {
    c=$?
    if [ $c -ne 0 ]; then
	if [ $1 == "-w" ] ; then
	    shift
	    logit "WARNING: nonzero exit code detected." "$*"
	else
	    die "ERROR: $*" 
	fi
    fi  
    return 0
}

# ---------------------
# Run the agr validator. 
# Args:
#  $1 = relative path (from the schema directory) to the jsonschema spec file
#  $2 = full path to the file
function validate {
  if [[ ${VALIDATOR_DIR} ]] ; then
      logit "Validating $2 against schema file $1..."
      python ${VALIDATOR_DIR}/agr_validate.py -s ${VALIDATOR_DIR}/$1 -d $2
      checkExit -w 
  else
      logit "No validation directory specified. Not validating: $2"
  fi
}

# ---------------------
# Initialize vars
OUTPUT_DIR="."
SCHEMA_RELEASE=""
RELEASE_COUNT=""
DO_ALL="true"
DO_BGI=""
DO_ALLELES=""
DO_EXPRESSION=""
DO_DISEASE=""
DO_PHENO=""
DO_GFF=""
VALIDATOR_DIR=""

# ---------------------
# Process command line args
until [ -z "$1" ] 
do
    case "$1" in
    -h)
        usage
	exit 0
	;;
    -D) 
	shift
        OUTPUT_DIR="$1"
        ;;  
    -R) 
	shift
        SCHEMA_RELEASE="$1"
        ;;  
    -V) 
	shift
        VALIDATOR_DIR="$1"
        ;;  
    -C) 
	shift
        RELEASE_COUNT="$1"
        ;;  
    -g) 
        DO_BGI="true"
	DO_ALL=""
        ;;  
    -a) 
        DO_ALLELES="true"
	DO_ALL=""
        ;;  
    -e) 
        DO_EXPRESSION="true"
	DO_ALL=""
        ;; 
    -d) 
        DO_DISEASE="true"
	DO_ALL=""
        ;; 
    -p) 
        DO_PHENO="true"
	DO_ALL=""
        ;; 
    -f) 
        DO_GFF="true"
	DO_ALL=""
        ;; 
    *)  
	usage
        die "Unrecognized option:" $1
    esac
    shift
done

# ---------------------------------------
# Check parameters
if [[ ! ${SCHEMA_RELEASE} ]] ; then
  die "Please specify a schema version."
fi

if [[ ! ${RELEASE_COUNT} ]] ; then
  die "Please specify a release count."
fi

# ---------------------------------------
#
ODIR="${OUTPUT_DIR}/MGI_${SCHEMA_RELEASE}_${RELEASE_COUNT}"
ROOT="${ODIR}/MGI_${SCHEMA_RELEASE}"

# ---------------------------------------
logit
logit "This is the Alliance data dumper. Starting run..."

# ---------------------------------------
#
logit "mkdir -p ${ODIR}"
mkdir -p ${ODIR}
checkExit

# ---------------------------------------
# BGI
if [[ ${DO_ALL} || ${DO_BGI} ]] ; then
  FILE="${ROOT}_BGI.json"
  logit "Generating basic gene info file ${FILE}"
  python basicGeneInfo.py > ${FILE}
  checkExit -w
  validate "gene/geneMetaData.json" ${FILE}
fi

# ---------------------------------------
# Expression
if [[ ${DO_ALL} || ${DO_EXPRESSION} ]] ; then
  FILE="${ROOT}_expression.json"
  logit "Generating wildtype expression data file ${FILE}"
  python expression.py > ${FILE}
  checkExit -w
  validate "expression/wildtypeExpressionMetaDataDefinition.json" ${FILE}
fi

# ---------------------------------------
# Alleles
if [[ ${DO_ALL} || ${DO_ALLELES} ]] ; then
  FILE="${ROOT}_allele.json"
  logit "Generating allele info file ${FILE}"
  python alleleInfo.py > ${FILE}
  checkExit -w
  validate "allele/alleleMetaData.json" ${FILE}
fi

# ---------------------------------------
# Phenotypes
if [[ ${DO_ALL} || ${DO_PHENO} ]] ; then
  FILE="${ROOT}_phenotype.json"
  logit "Generating phenotype annotations file ${FILE}"
  python diseasePheno.py -p > ${FILE}
  checkExit -w
  validate "phenotype/phenotypeMetaDataDefinition.json" ${FILE}
fi

# ---------------------------------------
# Disease
if [[ ${DO_ALL} || ${DO_DISEASE} ]] ; then
  FILE="${ROOT}_disease.json"
  logit "Generating disease annotations file ${FILE}"
  python diseasePheno.py -d > ${FILE}
  checkExit -w
  validate "disease/diseaseMetaDataDefinition.json" ${FILE}
fi

# ---------------------------------------
# GFF3
if [[ ${DO_ALL} || ${DO_GFF} ]] ; then
  FILE="${ROOT}_GFF.gff3"
  logit "Downloading ${FILE}"
  curl "http://www.informatics.jax.org/downloads/mgigff3/MGI.agr.gff3.gz" | gunzip > ${FILE}
  checkExit -w
fi

logit "Finished."
