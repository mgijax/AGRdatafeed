#!/bin/bash

function usage {
  logit "
Usage: $0 -s schema_release -c dump_count [-d output_directory][-p gaepdf][-g][-v dir][-r]
Generates files for upload to the Alliance. Typical invocation:
	$0 -s 1.0.0.7 -c 3 -d . -g -v /home/jer/work/agr/datafeed/agr_schemas
This will do the same thing but only dump the phenotype and allele info files:
	$0 -s 1.0.0.7 -c 3 -d . -g -v /home/jer/work/agr/datafeed/agr_schemas -p p,a
Options:
-h	Print this message and exit.
-s ver	Specifies the alliance schema release number, eg, 1.0.0.7. Required.
-c n	Specifies the update count for this schema version (1, 2, 3, ...). Required.
-d dir	Specifies the parent directory where the output directory will be created.
	Default = current working directory.
-p pts	Specify which part(s) to run. Argument is a comma-separated list (no spaces) of any of the following:
	g	Basic gene info
	a	Allele info
	e	Wildtype expression data
	p	Phenotype annotations
	d	Disease annotations
	f	GFF3 gene models
-N	No execute. Skips actually running commands; just prints what it would do.

You need to specify at least one of the following options to actually do anything:
-g      Generate data files specified in -p option.
-v dir	Validate data files specified in -p option. Argument = directory where validator is installed.
-r      Report stats on files specified in -p option..
"
}

# ---------------------
# Echos its arguments to the log file. Prepends a datetime stamp.
#
function logit {
  echo `date` "$*" 
}

# ---------------------
# Logs a message and exits with error code 1.
#
function die {
    logit "$*"
    exit 1
}

# ---------------------
# If the exit code of the last command ($?) is not zero, exits with a message.
#
function checkExit {
    c=$?
    if [ $c -ne 0 ]; then
	if [ $1 == "-w" ] ; then
	    shift
	    logit "WARNING: nonzero exit code detected." "$*"
	else
	    die "ERROR: $*" 
	fi
    fi  
    return 0
}

# ---------------------------------------
function generate {
  ftype="$1"
  script="$2"
  FILE="${ROOT}_${ftype}.json"
  logit "Generating ${ftype} file: ${FILE}"
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  if [[ ${ftype} == "GFF" ]] ; then
      if [[ ${DO_GENERATE} ]] ; then
	  ${script} > ${FILE}
      fi
  else
      if [[ ${DO_GENERATE} ]] ; then
	  python ${script} > ${FILE}
	  checkExit -w
      fi
  fi
}

# ---------------------
# Run the agr validator. 
# Args:
#  $1 = relative path (from the schema directory) to the jsonschema spec file
#  $2 = full path to the file
function validate {
  ftype=$1
  vschema=$2
  FILE="${ROOT}_${ftype}.json"
  if [[ ${ftype} == "GFF" ]] ; then
    return
  fi
  logit "Validating ${FILE} against schema file ${vschema}..."
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  python ${VALIDATOR_DIR}/agr_validate.py -s ${VALIDATOR_DIR}/${vschema} -d ${FILE}
  checkExit 
}
# ---------------------------------------
function doPart {
  part="$1"
  ftype="$2"
  script="$3"
  vschema="$4"
  if [[ ${DO_ALL} || " ${PARTS[*]} " == *" ${part} "* ]]; then
      if [[ ${DO_GENERATE} ]] ; then
	  generate "${ftype}" "${script}"
      fi
      if [[ ${DO_VALIDATE} ]] ; then
	  validate "${ftype}" "${vschema}"
      fi
  else
      logit "Skipping ${ftype}."
  fi
}

# ---------------------
# Initialize vars
OUTPUT_DIR="."
SCHEMA_RELEASE=""
RELEASE_COUNT=""
DO_ALL="true"
VALIDATOR_DIR=""
DO_GENERATE=""
DO_VALIDATE=""
DO_REPORT=""
NO_RUN=""

# ---------------------
# Process command line args
until [ -z "$1" ] 
do
    case "$1" in
    -h)
        usage
	exit 0
	;;
    -g)
        DO_GENERATE="true"
	;;
    -v) 
	shift
        VALIDATOR_DIR="$1"
	DO_VALIDATE="true"
        ;;  
    -r)
        DO_REPORT="true"
	;;
    -p)
        shift
	PARTS=(${1//,/ })
	DO_ALL=""
	;;
    -d) 
	shift
        OUTPUT_DIR="$1"
        ;;  
    -s) 
	shift
        SCHEMA_RELEASE="$1"
        ;;  
    -c) 
	shift
        RELEASE_COUNT="$1"
        ;;  
    -N)
        NO_RUN="true"
	;;
    *)  
	usage
        die "Unrecognized option:" $1
    esac
    shift
done

# ---------------------------------------
# Check parameters
if [[ ! ${SCHEMA_RELEASE} ]] ; then
  die "Please specify a schema version."
fi

if [[ ! ${RELEASE_COUNT} ]] ; then
  die "Please specify a release count."
fi

# ---------------------------------------
#
ODIR="${OUTPUT_DIR}/MGI_${SCHEMA_RELEASE}_${RELEASE_COUNT}"
ROOT="${ODIR}/MGI_${SCHEMA_RELEASE}"

# ---------------------------------------
logit
logit "This is the Alliance data dumper. Starting run..."

# ---------------------------------------
#
logit "mkdir -p ${ODIR}"
mkdir -p ${ODIR}
checkExit

doPart "g" "BGI" "basicGeneInfo.py" "gene/geneMetaData.json"
doPart "a" "allele" "alleleInfo.py" "allele/alleleMetaData.json"
doPart "e" "expression" "expression.py" "expression/wildtypeExpressionMetaDataDefinition.json" 
doPart "p" "phenotype" "diseasePheno.py -p" "phenotype/phenotypeMetaDataDefinition.json"
doPart "d" "disease" "diseasePheno.py -d" "disease/diseaseMetaDataDefinition.json" 
doPart "f" "GFF" "curl http://www.informatics.jax.org/downloads/mgigff3/MGI.agr.gff3.gz | gunzip"

logit "Finished."
