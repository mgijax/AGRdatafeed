#!/bin/bash

if [ -e ../Configuration ] ; then
    source ../Configuration
else
    echo "No Configuration file found."
    exit 1
fi

# ---------------------
# Initialize vars
#LOGFILE=""
#OUTPUT_DIR="."
#TOKEN_FILE=""
RELEASE_COUNT=""
VALIDATOR_DIR="../${AGR_SCHEMA}"
DO_GENERATE=""
DO_VALIDATE=""
DO_REPORT=""
DO_UPLOAD=""
DO_DISTRIB=""
NO_RUN=""

# ---------------------
function usage {
  echo "

AGRdatafeed: for sending data to the Alliance public site

Usage: $0 -s schema_release -R software_release -c dump_count [-d output_directory][-p gaepdf][-g][-v][-r][-u file]
Generates files for upload to the Alliance. Typical invocation:
	$0 -d . -g -v /home/jer/work/agr/datafeed/agr_schemas -r
This generates and validates all upload files.
This command will do the same thing, but only generate the phenotype and allele info files:
	$0 -d . -g -v /home/jer/work/agr/datafeed/agr_schemas -p p,a
Current env settings:
    AGR_SCHEMA_VERSION=${AGR_SCHEMA_VERSION}
    AGR_RELEASE_VERSION=${AGR_RELEASE_VERSION}
    OUTPUT_DIR=${OUTPUT_DIR}
    LOGFILE=${LOGFILE}
    TOKEN_FILE=${TOKEN_FILE}
Options:
-h	Print this message and exit.
-l file Specifies a log file. By default, log messages are sent to stdout. Overrides LOG_FILE
-c n	Specifies the update count for this schema version (1, 2, 3, ...).  Optional.
-d dir	Specifies the parent directory where the output directory will be created.
	Default = current working directory. Overrides OUTPUT_DIR.
-p pts	Specify which part(s) to run. Argument is a comma-separated list (no spaces) of any of the following:
	g	Basic gene info
	a	Allele info
	v	Allele variant info
        c       Allele construct info
	y	Genotype info
	e	Wildtype expression data
        h       High-throughput index metadata
	p	Phenotype annotations
	d	Disease annotations
	f	GFF3 gene models
        r       Publications and resources
	If no -p option is provided, all parts are run.

You need to specify at least one of the following options to actually do anything:
-g      Generate data files specified in -p option.
-v    	Validate data files specified in -p option.
-r      Report stats on files specified in -p option.
-D      Distribute files specified in -p option to the Alliance ftp directory
-u      Upload files specified in -p option to the Alliance submission endpoint. 

Debugging:
-N	No execute. Skips actually running commands; just prints what it would do.
"
}

# ---------------------
# Echos its arguments to the log file. Prepends a datetime stamp.
#
function logit {
  if [[ ${LOGFILE} ]] ; then
      echo `date` "$*" >> ${LOGFILE}
  else
      echo `date` "$*" 
  fi
}

# ---------------------
# Logs a message and exits with error code 1.
#
function die {
    logit "$*"
    exit 1
}

# ---------------------
# If the exit code of the last command ($?) is not zero, exits with a message.
#
function checkExit {
    c=$?
    if [ $c -ne 0 ]; then
	if [ "$1" == "-w" ] ; then
	    shift
	    logit "WARNING: nonzero exit code detected." "$*"
	else
	    die "ERROR: $*" 
	fi
    fi  
    return 0
}

# ---------------------------------------
function setFile {
  ftype="$1"
  if [[ ${ftype} == "GFF" ]] ; then
      BASENAME="${ftype}.gff3"
  elif [[ ${ftype} == "assembly" ]] ; then
      BASENAME="${ftype}.fa.gz"
  else
      BASENAME="${ftype}.json"
  fi
  FILE="${ROOT}_${BASENAME}"
}

# ---------------------------------------
function generate {
  ftype="$1"
  script="$2"
  setFile ${ftype}
  logit "Generating ${ftype} file: ${FILE} with command: ${script}"
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  if [[ ${ftype} == "GFF" ]] ; then
      if [[ ${DO_GENERATE} ]] ; then
	  url=${script}
	  curl ${url} | gunzip > ${FILE}
      fi
  elif [[ ${ftype} == "assembly" ]] ; then
      return
  else
      if [[ ${DO_GENERATE} ]] ; then
	  ${PYTHON} ${script} > ${FILE}
	  checkExit
      fi
  fi
}

# ---------------------
# Run the agr validator. 
# Args:
#  $1 = relative path (from the schema directory) to the jsonschema spec file
#  $2 = full path to the file
function validate {
  ftype=$1
  vschema=$2
  setFile ${ftype}
  if [[ ${ftype} == "GFF" ]] ; then
    return
  elif [[ ${ftype} == "assembly" ]] ; then
    return
  fi
  logit "Validating ${FILE} against schema file ${vschema}..."
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  #
  # ASSUMES the validor is checked out to the correct schema version!
  #

  source venv/bin/activate
  # NOTE: do not use $PYTHON here! In the virt env, must just use "python"!
  python ${VALIDATOR_DIR}/bin/agr_validate.py -s ${VALIDATOR_DIR}/${vschema} -d ${FILE}
  checkExit 
  logit "Validated: ${FILE}"
  deactivate
}
# ---------------------
# Report stats
function report {
  ftype=$1
  pattern=$2
  setFile ${ftype}
  logit "Reporting stats on file ${FILE} ..."
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  bytes=`cat ${FILE} | wc -c`
  logit "${bytes} bytes"
  if [[ ${pattern} ]] ; then
      count=`grep ${pattern} ${FILE} | wc -l`
      logit "${count} records"
  fi
}
# ---------------------
# See: https://github.com/alliance-genome/agr_java_software/blob/develop/agr_api/Submission_README.md
function upload {
  ftype=$1
  aftype=$2
  setFile ${ftype}
  logit "Uploading file to AGR: ${AGR_RELEASE_VERSION}_${aftype}_MGI=@${FILE} ..."
  token=`cat ${TOKEN_FILE}`
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  curl \
      -H "Authorization: Bearer ${token}" \
      -X POST "https://fms.alliancegenome.org/api/data/submit" \
      -F "${AGR_RELEASE_VERSION}_${aftype}_MGI=@${FILE}"
  checkExit
  logit "Uploaded: ${FILE}"
}

# ---------------------------------------
function distrib {
  ftype=$1
  aftype=$2
  setFile ${ftype}
  logit "Distributing ${FILE} to FTP directory: ${FTPALLIANCE}"
  if [[ ${NO_RUN} ]] ; then
    return
  fi
  cp ${FILE} ${FTPALLIANCE}/${BASENAME}
  chmod 666 ${FTPALLIANCE}/${BASENAME}
  gzip -f ${FTPALLIANCE}/${BASENAME}
}

# ---------------------------------------
function doPart {
  part="$1"
  ftype="$2"
  script="$3"
  vschema="$4"
  grepfor="$5"
  allianceftype="$6"
  if [[ " ${PARTS[*]} " == *" ${part} "* ]]; then
      if [[ ${DO_GENERATE} ]] ; then
	  generate "${ftype}" "${script}"
      fi
      if [[ ${DO_VALIDATE} ]] ; then
	  validate "${ftype}" "${vschema}"
      fi
      if [[ ${DO_REPORT} ]] ; then
	  report "${ftype}" "${grepfor}"
      fi
      if [[ ${DO_UPLOAD} ]] ; then
	  upload "${ftype}" "${allianceftype}"
      fi
      if [[ ${DO_DISTRIB} ]] ; then
	  distrib "${ftype}" "${allianceftype}"
      fi
  else
      logit "Skipping ${ftype}."
  fi
}

# ---------------------------------------
function parseCommandLine {
    PARTS="g a v c y e h p d f"
    # Process command line args
    until [ -z "$1" ] 
    do
	case "$1" in
	-h)
	    usage
	    exit 0
	    ;;
	-l)
	    shift
	    LOGFILE="$1"
	    ;;
	-g)
	    DO_GENERATE="true"
	    ;;
	-D)
	    DO_DISTRIB="true"
	    ;;
	-v) 
	    DO_VALIDATE="true"
	    ;;  
	-u) 
	    DO_UPLOAD="true"
	    ;;  
	-r)
	    DO_REPORT="true"
	    ;;
	-p)
	    shift
	    PARTS=(${1//,/ })
	    ;;
	-d) 
	    shift
	    OUTPUT_DIR="$1"
	    ;;  
	-c) 
	    shift
	    RELEASE_COUNT="$1"
	    ;;  
	-N)
	    NO_RUN="true"
	    ;;
	*)  
	    usage
	    die "Unrecognized option:" $1
	esac
	shift
    done
    # ---------------------------------------
    # Check parameters
    if [[ ! ${AGR_SCHEMA_VERSION} ]] ; then
      die "Please specify a schema version with -s."
    fi
    if [[ ! ${AGR_RELEASE_VERSION} ]] ; then
      die "Please specify a release version with -R."
    fi
}


function doParts {
    # args: cmdAbbrev; fileType; script; schemaFile; grepPattern; allianceFileType
    doPart "r" "reference" "publications.py -p all" "ingest/resourcesAndReferences/referenceMetaData.json" '"primaryId"' "REFERENCE"
    doPart "r" "ref_exchange" "publications.py -p pubmed" "ingest/resourcesAndReferences/referenceExchangeMetaData.json" '"pubMedId"' "REF-EXCHANGE"
    #doPart "r" "resource" "publications.py -p resource" "ingest/resourcesAndReferences/resourceMetaData.json" '"primaryId"' "RESOURCE"
    doPart "g" "BGI" "basicGeneInfo.py" "ingest/gene/geneMetaData.json" '"primaryId"' "BGI"
    doPart "a" "allele" "alleleInfo.py" "ingest/allele/alleleMetaData.json" '"primaryId"' "ALLELE"
    doPart "v" "variant" "variant.py" "ingest/allele/variantMetaData.json" "" "VARIATION"
    doPart "c" "construct" "construct.py" "ingest/construct/constructMetaData.json" "" "CONSTRUCT"
    doPart "y" "AGM" "genotype.py" "ingest/affectedGenomicModel/affectedGenomicModelMetaData.json" "primaryID" "AGM"
    doPart "e" "expression" "expression.py" "ingest/expression/wildtypeExpressionMetaDataDefinition.json" '"geneId"' "EXPRESSION"
    doPart "h" "htExperiment" "htpDataset.py -d experiments" "ingest/htp/dataset/datasetMetaDataDefinition.json" '"datasetId"' "HTPDATASET"
    doPart "h" "htSample" "htpDataset.py -d samples" "ingest/htp/datasetSample/datasetSampleMetaDataDefinition.json" '"sampleTitle"' "HTPDATASAMPLE"
    doPart "p" "phenotype" "diseasePheno.py -p" "ingest/phenotype/phenotypeMetaDataDefinition.json" '"objectId"' "PHENOTYPE"
    doPart "d" "disease" "diseasePheno.py -d" "ingest/disease/diseaseMetaDataDefinition.json" '"DOid"' "DAF"
    doPart "f" "GFF" "http://www.informatics.jax.org/downloads/mgigff3/MGI.agr.gff3.gz" "" "curie=" "GFF"
    #doPart "t" "assembly" "" "" "" "FASTA"
}

function main {
    #
    parseCommandLine $*
    #
    ODIR="${OUTPUT_DIR}/MGI_${AGR_SCHEMA_VERSION}"
    if [[ ${RELEASE_COUNT} ]] ; then
	ODIR="${ODIR}_${RELEASE_COUNT}"
    fi
    ROOT="${ODIR}/MGI_${AGR_SCHEMA_VERSION}"

    # ---------------------------------------
    logit
    logit "This is the Alliance data dumper. Starting run..."

    # ---------------------------------------
    #
    logit "mkdir -p ${ODIR}"
    mkdir -p ${ODIR}
    checkExit

    if [[ ${LOGFILE} ]]; then
        doParts >>${LOGFILE} 2>&1
    else
        doParts
    fi

    logit "Finished."
}

main $*
